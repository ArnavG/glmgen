
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.0.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "glmgen"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('glmgen')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("glmgen-package")
> ### * glmgen-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glmgen-package
> ### Title: Fast generalized lasso algorithms
> ### Aliases: glmgen-package glmgen
> ### Keywords: package
> 
> ### ** Examples
> 
>   set.seed(0)
>   n = 100
>   x = runif(n, min=-2*pi, max=2*pi)
>   y = 1.5*sin(x) + sin(2*x) + rnorm(n, sd=0.2)
>   out = trendfilter(y, x, k=2)
> 
>   xx = seq(min(x),max(x),length=500)
>   lambda = out@lambda[25]
>   yy = predict(out,x.new=xx,lambda=lambda)
>   plot(x,y)
>   lines(xx,yy,col=2)
> 
> 
> 
> cleanEx()
> nameEx("predict-methods")
> ### * predict-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict-methods
> ### Title: Make function predictions given a trendfilter object
> ### Aliases: predict,trendfilter-method predict.trendfilter
> ### Keywords: methods
> 
> ### ** Examples
> 
>   set.seed(0)
>   n = 100
>   x = runif(n, min=-2*pi, max=2*pi)
>   y = 1.5*sin(x) + sin(2*x) + rnorm(n, sd=0.2)
>   out = trendfilter(y, x, k=2)
> 
>   xx = seq(min(x),max(x),length=500)
>   lambda = out@lambda[25]
>   yy = predict(out,x.new=xx,lambda=lambda)
>   plot(x,y)
>   lines(xx,yy,col=2)
> 
>   # Will throw a warning
>   predict(out,x.new=-10,lambda=lambda)
Warning: In predict: 
    Predict called at new x values of the original range.
         0.285
[1,] -26.73606
> 
> 
> 
> cleanEx()
> nameEx("trendfilter-class")
> ### * trendfilter-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trendfilter-class
> ### Title: Class '"trendfilter"'
> ### Aliases: trendfilter-class summary,trendfilter-method
> ### Keywords: classes
> 
> ### ** Examples
> 
>   set.seed(0)
>   n = 100
>   x = runif(n, min=-2*pi, max=2*pi)
>   y = 1.5*sin(x) + sin(2*x) + rnorm(n, sd=0.2)
>   out = trendfilter(y, x, k=2)
> 
>   xx = seq(min(x),max(x),length=500)
>   lambda = out@lambda[25]
>   yy = predict(out,x.new=xx,lambda=lambda)
>   plot(x,y)
>   lines(xx,yy,col=2)
> 
> 
> 
> cleanEx()
> nameEx("trendfilter")
> ### * trendfilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trendfilter
> ### Title: Fit a trend filtering model
> ### Aliases: trendfilter
> 
> ### ** Examples
> 
>   set.seed(0)
>   n = 100
>   x = runif(n, min=-2*pi, max=2*pi)
>   y = 1.5*sin(x) + sin(2*x) + rnorm(n, sd=0.2)
>   out = trendfilter(y, x, k=2)
> 
>   xx = seq(min(x),max(x),length=500)
>   lambda = out@lambda[25]
>   yy = predict(out,x.new=xx,lambda=lambda)
>   plot(x,y)
>   lines(xx,yy,col=2)
> 
> 
> 
> cleanEx()
> nameEx("trendfilter.control.list")
> ### * trendfilter.control.list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trendfilter.control.list
> ### Title: Control list for tuning trend filtering algorithm
> ### Aliases: trendfilter.control.list
> 
> ### ** Examples
> 
>   set.seed(0)
>   n = 100
>   x = runif(n, min=-2*pi, max=2*pi)
>   y = 1.5*sin(x) + sin(2*x) + rnorm(n, sd=0.2)
>   out = trendfilter(y, x, k=2, control=trendfilter.control.list(rho=3))
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.603 0.01 0.656 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
